/***** 
*  作者@chavyleung，基于其在通知中加了quanx媒体链接
*/

// 新建一个对象
$ = new Env('Test')

 // 发通知
$.msg($.name, "sub_titile", "点击调整到Github", "https://github.com/toulanboy", "https://avatars0.githubusercontent.com/u/12446619?s=460&v=4")

// 写持久化变量
$.setdata("value", "this_is_a_key");

// 读持久化变量
var result = $.getdata("this_is_a_key");

// 日志输出
$.log(result)

// 发起Get请求
test_get = {
    url:`https://postman-echo.com/get?foo1=bar1&foo2=bar2`,
    //headers
    //body
}
$.get(test_get, (error, response, data) =>{
    if(error){
        $.log(error)
    }
    $.log(data)
})

// Post
test_post = {
    url:`https://postman-echo.com/post`,
    //headers
    body:`a=12&b=23`
}
$.post(test_post, (error, response, data) =>{
    if(error){
        $.log(error)
    }
    $.log(data)
})

//作者@chavyleung，基于其在通知中加了quanx媒体链接
 function Env(s) {
    this.name = s, this.data = null, this.logs = [], this.isSurge = (() => "undefined" != typeof $httpClient), this.isQuanX = (() => "undefined" != typeof $task), this.isLoon = (() => "undefined" != typeof $loon), this.isNode = (() => "undefined" != typeof module && !!module.exports), this.log = ((...s) => {
        this.logs = [...this.logs, ...s], s ? console.log(s.join("\n")) : console.log(this.logs.join("\n"))
    }), this.msg = ((s = this.name, t = "", i = "", jump_url = "", media_link="") => {
        this.isLoon() && $notification.post(s, t, i, jump_url), this.isSurge() && !this.isLoon() && $notification.post(s, t, i), this.isQuanX() && $notify(s, t, i, {
            "open-url": jump_url,
            "media-url":media_link
        });
        const e = ["", "==============\ud83d\udce3\u7cfb\u7edf\u901a\u77e5\ud83d\udce3=============="];
        s && e.push(s), t && e.push(t), i && e.push(i), console.log(e.join("\n"))
    }), this.getdata = (s => {
        if (this.isSurge()) return $persistentStore.read(s);
        if (this.isQuanX()) return $prefs.valueForKey(s);
        if (this.isNode()) {
            const t = "box.dat";
            return this.fs = this.fs ? this.fs : require("fs"), this.fs.existsSync(t) ? (this.data = JSON.parse(this.fs.readFileSync(t)), this.data[s]) : null
        }
    }), this.setdata = ((s, t) => {
        if (this.isSurge()) return $persistentStore.write(s, t);
        if (this.isQuanX()) return $prefs.setValueForKey(s, t);
        if (this.isNode()) {
            const i = "box.dat";
            return this.fs = this.fs ? this.fs : require("fs"), !!this.fs.existsSync(i) && (this.data = JSON.parse(this.fs.readFileSync(i)), this.data[t] = s, this.fs.writeFileSync(i, JSON.stringify(this.data)), !0)
        }
    }), this.wait = ((s, t = s) => i => setTimeout(() => i(), Math.floor(Math.random() * (t - s + 1) + s))), this.get = ((s, t) => this.send(s, "GET", t)), this.post = ((s, t) => this.send(s, "POST", t)), this.send = ((s, t, i) => {
        if (this.isSurge()) {
            const e = "POST" == t ? $httpClient.post : $httpClient.get;
            e(s, (s, t, e) => {
                t && (t.body = e, t.statusCode = t.status), i(s, t, e)
            })
        }
        this.isQuanX() && (s.method = t, $task.fetch(s).then(s => {
            s.status = s.statusCode, i(null, s, s.body)
        }, s => i(s.error, s, s))), this.isNode() && (this.request = this.request ? this.request : require("request"), s.method = t, s.gzip = !0, this.request(s, (s, t, e) => {
            t && (t.status = t.statusCode), i(null, t, e)
        }))
    }), this.done = ((s = {}) => this.isNode() ? null : $done(s))
}